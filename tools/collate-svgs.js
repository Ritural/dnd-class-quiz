const fs = require('fs');
const path = require('path');

const SVG_FOLDER_LOCATION = 'public/svg/';
const DESTINATION_FOLDER = 'public/svg/all.tsx';

/**
 * Promise all
 * @author Loreto Parisi (loretoparisi at gmail dot com)
 */
function promiseAllP(items, block) {
  const promises = [];
  items.forEach(function(item, index) {
    promises.push(
      (function(item, i) {
        return new Promise(function(resolve, reject) {
          return block.apply(this, [item, index, resolve, reject]);
        });
      })(item, index)
    );
  });
  return Promise.all(promises);
}

/**
 * Read files
 * @param dirname string
 * @return Promise
 * @author Loreto Parisi (loretoparisi at gmail dot com)
 * @see http://stackoverflow.com/questions/10049557/reading-all-files-in-a-directory-store-them-in-objects-and-send-the-object
 */
function readFiles(dirname) {
  return new Promise((resolve, reject) => {
    fs.readdir(dirname, function(err, filenames) {
      if (err) return reject(err);
      promiseAllP(filenames, (filename, index, resolve, reject) => {
        fs.readFile(path.resolve(dirname, filename), 'utf-8', function(
          err,
          content
        ) {
          if (err) return reject(err);
          return resolve({ filename: filename, contents: content });
        });
      })
        .then(results => {
          return resolve(results);
        })
        .catch(error => {
          return reject(error);
        });
    });
  });
}

readFiles(SVG_FOLDER_LOCATION)
  .then(files => {
    const filteredFiles = files.filter(item => {
      return item.filename.includes('.svg');
    });

    const svgArr = ["import * as React from 'react';", '', 'const Icons = {'];

    filteredFiles.forEach(item => {
      let objKey = item.filename.replace('.svg', '');

      // Remove some of the bloat in the svgs
      let svg = item.contents;
      svg = svg.replace(/(\n)+/g, '');
      svg = svg.replace(/(\")+/g, "'");

      svg = svg.replace('<!-- Generated by IcoMoon.io -->', ''); // If the icons are generated from IcoMoon.io
      svg = svg.replace('xmlns:xlink', 'xmlnsXlink');
      svg = svg.replace('xlink:href', 'xlinkHref');
      svg = svg.replace('stroke-width', 'strokeWidth');
      svg = svg.replace('fill-rule', 'fillRule');

      // console.log(svg);
      svgArr.push(`  '${objKey}': ${svg},`);
    });

    // Close the object
    svgArr.push('};');
    svgArr.push('');
    svgArr.push('export default Icons;');
    svgArr.push('');

    fs.writeFile(DESTINATION_FOLDER, svgArr.join('\n'), function(err) {
      if (err) {
        return console.error(err);
      }
    });
  })
  .catch(error => {
    console.error(error);
  });
